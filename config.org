#+PROPERTY header-args :tangle yes
 
* Global Variables
  #+BEGIN_SRC emacs-lisp

    (setq evilNormalColor "#D2527F") 
    (setq evilInsertColor "#2ABB9B")
    (setq evilVisualColor "#344256")

  #+END_SRC
* Custom Functions
  #+BEGIN_SRC emacs-lisp

    (defvar my/skippable-buffers 
      '(
         "*spacemacs*" "*Messages*" "*scratch*" "*Help*" "*Warnings*"
       )
      "Buffer names ignored by `my/next-buffer' and `my/previous-buffer'.")

    ;; buffer changer function
    (defun my/change-buffer (change-buffer)
      "Call CHANGE-BUFFER until current buffer is not in `my/skippable-buffers'."
      (let ((initial (current-buffer)))
        (funcall change-buffer)
        (let ((first-change (current-buffer)))
          (catch 'loop
            (while (member (buffer-name) my/skippable-buffers)
              (funcall change-buffer)
              (when (eq (current-buffer) first-change)
                (switch-to-buffer initial)
                (throw 'loop t)))))))

    (defun my/switch-journal () 
     (interactive)
     (if (string-equal org-journal-dir (getenv "wo15"))
         (progn 
           (setq org-journal-dir (getenv "ho15"))
           (print "Setting hj")
         )
       (progn 
         (setq org-journal-dir (getenv "wo15"))
         (print "Setting wj")
       )
     )
    )

    ;; custom next-buffer
    (defun my/next-buffer ()
      "Variant of `next-buffer' that skips `my/skippable-buffers'."
      (interactive)
      (my/change-buffer 'next-buffer))

    ;; custom previous-buffer
    (defun my/previous-buffer ()
      "Variant of `previous-buffer' that skips `my/skippable-buffers'."
      (interactive)
      (my/change-buffer 'previous-buffer))

    (defun my/evil-paste-after-from-0 ()
      (interactive)
      (let ((evil-this-register ?0))
        (call-interactively 'evil-paste-after)))


    (defun my/escape-and-save ()
      (interactive)
      (evil-escape)
      (save-buffer)
      )

    (defun my/run-projectile-invalidate-cache (&rest _args)
      ;; We ignore the args to `magit-checkout'.
      (projectile-invalidate-cache nil))


    (defun my/enable-visual-line-mode ()
      "enables visual-line-navigation which is word-wrap"
      (spacemacs/toggle-visual-line-navigation)
      )


    (defun my/newline-and-indent ()
      "inserts a newline between the brackets"
      (interactive)
      (newline)
      (save-excursion
        (newline)
        (indent-for-tab-command))
      (indent-for-tab-command)
      )


    (defun my/scroll-half-page-down ()
      "scroll down half the page"
      (interactive)
      (scroll-down (/ (window-body-height) 2)))

    ;; scroll half page up
    (defun my/scroll-half-page-up ()
      "scroll up half the page"
      (interactive)
      (scroll-up (/ (window-body-height) 2)))


    (defun my/modify-underscore-syntax () 
      (modify-syntax-entry ?_ "w" (syntax-table)))

    (defun my/block-comment-setup ()
      "Configure multi-line comments."
      (setq comment-start       "// "
            comment-multi-line  t
            comment-padding     nil
            comment-style       'extra-line
            comment-continue    " * "
            comment-empty-lines t))


    (defun my/indent-setup (n)
      ;; java/c/c++
      (setq c-basic-offset n)
      ;; web development
      (setq coffee-tab-width n) ; coffeescript
      (setq javascript-indent-level n) ; javascript-mode
      (setq js-indent-level n) ; js-mode
      (setq js2-basic-offset n) ; js2-mode, in latest js2-mode, it's alias of js-indent-level
      (setq web-mode-markup-indent-offset n) ; web-mode, html tag in html file
      (setq web-mode-css-indent-offset n) ; web-mode, css in html file
      (setq web-mode-code-indent-offset n) ; web-mode, js code in html file
      (setq css-indent-offset n) ; css-mode
      ) 

    (defun my/js-symbols-setup () 
      (interactive)
      (mapc (lambda (pair) (push pair prettify-symbols-alist))
            '(
              ("=>" . ?⇒)
              )))

    (defun my/react-mode-setup ()
      (prettier-js-mode t)
      ;; (my/js-symbols-setup)
      (my/block-comment-setup)
      (flycheck-mode)
      )

    (setq tab-always-indent t)

    (defun my/eslint-setup ()
      (let* ((root (locate-dominating-file
                    (or (buffer-file-name) default-directory)
                    "node_modules"))
             (eslint (and root
                          (expand-file-name "node_modules/eslint/bin/eslint.js"
                                            root))))
        (when (and eslint (file-executable-p eslint))
          (setq-local flycheck-javascript-eslint-executable eslint))))

    (defun my/org-heading-setup ()
      "Stop the org-level headers from increasing in height relative to the other text."
      (dolist (face '(
                      org-level-1
                      org-level-2
                      org-level-3
                      org-level-4
                      org-level-5
                      org-level-6
                      org-level-7
                      org-level-8))
        (set-face-attribute face nil :height 1.0)))

  #+END_SRC
* Org-mode config
  #+BEGIN_SRC emacs-lisp

    (use-package org
      :ensure t
      :diminish org-mode
      :bind 
      :config
      (progn 

        (setq org-todo-keywords
              (quote ((sequence "☛ TODO(t)" "➜ STARTED(s!)" "|" "✓ DONE(d@)")
                      (sequence "⚑ WAITING(w)" "|")
                      (sequence "|" "✘ CANCELED(c)"))))

        (setq org-todo-keyword-faces
              (quote (("☛ TODO" :foreground "#FFCACA" :weight bold)
                      ("➜ STARTED" :foreground "#CADAFF" :weight bold)
                      ("✓ DONE" :foreground "#CAFFE9" :weight bold)
                      ("⚑ WAITING" :foreground "#FFE2CA" :weight bold)
                      ("✘ CANCELED" :foreground "#FFCAF9" :weight bold)))) 

        ;; set up org-bullet symbols
        (setq org-bullets-bullet-list '("◒" "◐" "◓" "◑" ))

        (setq org-enforce-todo-dependencies t)
        (setq org-agenda-dim-blocked-tasks t)

        (setq org-clock-persist 'history)
        (org-clock-persistence-insinuate)

        ;; enable pretty entities by default in org-mode 
        (add-hook 'org-mode-hook (setq org-pretty-entities t))

        ;; modify org heading in org-mode
        (add-hook 'org-mode-hook 'my/org-heading-setup)

        (evil-define-key 'normal org-mode-map ",v" 'org-todo)
        (evil-define-key 'insert org-mode-map (kbd "s-<return>") 'org-insert-item)

        ))

  #+END_SRC
* Spaceline config
  #+BEGIN_SRC emacs-lisp

    (use-package spaceline
       :ensure t)

    ;; (use-package spaceline
    ;;   :ensure t
    ;;   :config
    ;;   (progn 

    ;;     ;; ;;spaceline-all-the-icons setup
    ;;     ;; (setq spaceline-all-the-icons-clock-always-visible nil)
    ;;     ;; (setq spaceline-all-the-icons-eyebrowse-display-name nil)
    ;;     ;; (setq spaceline-all-the-icons-flycheck-alternate t)
    ;;     ;; (setq spaceline-all-the-icons-hide-long-buffer-path t)
    ;;     ;; (setq spaceline-all-the-icons-slim-render t)
    ;;     ;; ;; (spaceline-toggle-all-the-icons-eyebrowse-workspace-off)

    ;;     ;; ;;spaceline/modeline segment config
    ;;     ;; (spaceline-toggle-point-position-on)
    ;;     ;; (spaceline-toggle-process-off)
    ;;     ;; (spaceline-toggle-buffer-encoding-off)
    ;;     ;; (spaceline-toggle-buffer-encoding-abbrev-off)
    ;;     ;; (spaceline-toggle-purpose-off)
    ;;     ;; (spaceline-toggle-minor-modes-on)
    ;;     ;; (spaceline-toggle-persp-name-off)
    ;;     ;; (setq display-time-default-load-average nil)


    ;;     ;; (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)

    ;;     ;; (set-face-attribute
    ;;     ;;  'spaceline-evil-normal nil :background evilNormalColor :foreground "black")
    ;;     ;; (set-face-attribute
    ;;     ;;  'spaceline-evil-motion nil :background evilNormalColor :foreground "black")
    ;;     ;; (set-face-attribute
    ;;     ;;  'spaceline-evil-visual nil :background evilVisualColor :foreground "white")
    ;;     ;; (set-face-attribute
    ;;     ;;  'spaceline-evil-insert nil :background evilInsertColor :foreground "black")
    ;;    ))

  #+END_SRC
* Yasnippet config
  #+BEGIN_SRC emacs-lisp

    (use-package yasnippet
      :ensure t
      :config
      (progn 

        (setq yas-snippet-dirs
              '("~/.spacemacs.d/snippets" 
                ))
        (yas-global-mode 1) 

        ))

  #+END_SRC
* Rainbow mode config
  #+BEGIN_SRC emacs-lisp

    (use-package rainbow-mode
      :ensure t
      :config
      (progn 

        (dolist (hook 
                 '(prog-mode-hook text-mode-hook react-mode-hook web-mode-hook))
          (add-hook hook 'rainbow-mode))

        ))

  #+END_SRC
* Flycheck config
  #+BEGIN_SRC emacs-lisp

    (use-package flycheck
      :ensure t
      :config
      (progn 

        ;; flycheck enabled by default
        (add-hook 'after-init-hook #'global-flycheck-mode)
        (setq flycheck-check-syntax-automatically '(mode-enabled save))
        (setq-default flycheck-disabled-checkers
                      (append flycheck-disabled-checkers
                              '(javascript-jshint)))


        (flycheck-add-mode 'javascript-eslint 'react-mode)
        (add-hook 'flycheck-mode-hook #'my/eslint-setup)

        ))

  #+END_SRC
* Projectile config
  #+BEGIN_SRC emacs-lisp

    (use-package projectile
      :ensure t
      :config
      (progn 

        (setq projectile-indexing-method 'alien)
        (setq projectile-enable-caching t)

        (add-hook 'projectile-after-switch-project-hook #'setup-project-paths)

        ;; invalidates projectile cache on git actions
        (advice-add 'magit-checkout
                    :after #'my/run-projectile-invalidate-cache)
        (advice-add 'magit-branch-and-checkout ; This is `b c'.
                    :after #'my/run-projectile-invalidate-cache)
      
       (setq magit-bury-buffer-function 'magit-mode-quit-window)

        ))

  #+END_SRC
* Ivy config
  #+BEGIN_SRC emacs-lisp

    (use-package ivy
      :ensure t
      :bind 
      :config
      (progn 

        ;; ivy config
        (setq ivy-re-builders-alist
              '((ivy-switch-buffer . ivy--regex-fuzzy)
                (counsel-projectile-find-file . ivy--regex-fuzzy)
                (t . ivy--regex-plus)))
        (add-to-list 'ivy-highlight-functions-alist
                     '(swiper--re-builder . ivy--highlight-ignore-order))

        (setq dumb-jump-selector 'ivy)

        ))

  #+END_SRC
* Dired config
  #+BEGIN_SRC emacs-lisp

    (use-package dired-x
      :config
      (progn
        (setq dired-omit-verbose nil)
        (add-hook 'dired-mode-hook #'dired-omit-mode)
        (setq dired-omit-files
              (concat dired-omit-files "\\|^.DS_STORE$\\|^.projectile$"))))

    ;; use all-the-icons in dired
    (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)

    (require 'dired+)
    (toggle-diredp-find-file-reuse-dir 1)
    (evil-define-key 'normal dired-mode-map
      (kbd "h") 'diredp-up-directory-reuse-dir-buffer
      (kbd "l") 'dired-find-alternate-file
      (kbd "<escape>") 'kill-this-buffer
      (kbd "q") 'kill-this-buffer)

  #+END_SRC
* Encoding config
  #+BEGIN_SRC emacs-lisp

    ;; setup encoding
    (setq locale-coding-system 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (set-selection-coding-system 'utf-8)
    (prefer-coding-system 'utf-8)

  #+END_SRC
* Wgrep config
  #+BEGIN_SRC emacs-lisp

    (use-package wgrep
      :ensure t
      :config
      (progn 

        ;; wgrep binding to save all buffers after edit
        (setq wgrep-auto-save-buffer t)

        ))

  #+END_SRC
* Treemacs config
  #+BEGIN_SRC emacs-lisp

    (use-package treemacs
      :ensure t
      :config
      (progn 
        (spacemacs/set-leader-keys "ft" #'treemacs)
        (setq treemacs-show-hidden-files t)
        (setq-default treemacs-width 30)))

    (with-eval-after-load 'treemacs
      (defun treemacs-ignore-gitignore (file _)
        (string= file ".DS_Store"))
      (push #'treemacs-ignore-gitignore treemacs-ignored-file-predicates))

  #+END_SRC
* Markdown config
  #+BEGIN_SRC emacs-lisp

    (use-package markdown-mode
      :ensure t
      :commands (markdown-mode gfm-mode)
      :mode (("README\\.md\\'" . gfm-mode)
             ("\\.md\\'" . markdown-mode)
             ("\\.markdown\\'" . markdown-mode))
      :config 
      (progn

        (setq markdown-command "multimarkdown")
        (prettier-js-mode t)

        ))

  #+END_SRC
* Pcre2el
  Converts lisp regex to normal regex
  #+BEGIN_SRC emacs-lisp

    (use-package pcre2el
      :ensure t
      :config
      (pcre-mode)
      )

  #+END_SRC
* Multiedit
  #+BEGIN_SRC emacs-lisp

    (use-package evil-multiedit
      :ensure t
      :config
      (progn


        ;; For moving between edit regions
        (define-key evil-multiedit-state-map (kbd "C-n") 'evil-multiedit-next)
        (define-key evil-multiedit-state-map (kbd "C-p") 'evil-multiedit-prev)
        (define-key evil-multiedit-insert-state-map (kbd "C-n") 'evil-multiedit-next)
        (define-key evil-multiedit-insert-state-map (kbd "C-p") 'evil-multiedit-prev)

        ;; Ex command that allows you to invoke evil-multiedit with a regular expression, e.g.
        (evil-ex-define-cmd "ie[dit]" 'evil-multiedit-ex-match)

        ))

  #+END_SRC
* Dumb-jump config
  #+BEGIN_SRC emacs-lisp

    (use-package dumb-jump
      :ensure t
      :config
      (progn 

        ;; dumb jump config set to SPC d
        (spacemacs/set-leader-keys "dj" #'dumb-jump-go)
        (spacemacs/set-leader-keys "dq" #'dumb-jump-quick-look)
        (spacemacs/set-leader-keys "db" #'dumb-jump-back)

        ))

  #+END_SRC
* Kotlin config
  #+BEGIN_SRC emacs-lisp

    (use-package kotlin-mode 
      :ensure t
      :config
      ( progn 
        ;; (require 'flycheck-kotlin)
        ;; (flycheck-mode t)
        ;; (flycheck-kotlin-setup)
        (setq kotlin-tab-width 2)))


  #+END_SRC
* Groovy config
  #+BEGIN_SRC emacs-lisp

    (use-package groovy-mode 
      :ensure t
      :config
      ( progn 
        (setq groovy-indent-offset 2)))

  #+END_SRC
* Javascript config
  #+BEGIN_SRC emacs-lisp


    (setq js2-strict-missing-semi-warning nil) ;; semi-colon warnings not shown
    (setq js2-strict-trailing-comma-warning nil) ;; trailing comma warnings not shown
    (my/indent-setup 2)

    ;; react-mode setup
     (add-to-list 'magic-mode-alist '("\\(import.*from \'react\';\\|\/\/ @flow\nimport.*from \'react\';\\)" . rjsx-mode))
    ;;(add-to-list 'magic-mode-alist '("import React" . react-mode))
    (add-hook 'react-mode-hook #'my/react-mode-setup)

    ;; js2-mode setup
    (add-to-list 'auto-mode-alist '("\\.js\\'" . rjsx-mode))
    ;;(add-hook 'js2-mode-hook #'my/react-mode-setup)

    ;; json-mode setup
    (add-to-list 'auto-mode-alist '("\\.json\\'" . json-mode))
    (add-hook 'json-mode-hook 'prettier-js-mode)

    ;; css-mode setup
    (add-hook 'css-mode-hook 'prettier-js-mode)
    (setq css-fontify-colors nil)

    ;;(add-hook 'web-mode-hook 'prettier-js-mode)

    ;; ---------flow flycheck setup --------------------
    ;;;; flycheck, eslint along with flow setup
    ;;(require 'f)
    ;;(require 'json)
    ;;(require 'flycheck)
    ;;
    ;;(defun flycheck-parse-flow (output checker buffer)
    ;;  (let ((json-array-type 'list))
    ;;    (let ((o (json-read-from-string output)))
    ;;      (mapcar #'(lambda (errp)
    ;;                  (let ((err (cadr (assoc 'message errp))))
    ;;                    (flycheck-error-new
    ;;                     :line (cdr (assoc 'line err))
    ;;                     :column (cdr (assoc 'start err))
    ;;                     :level 'error
    ;;                     :message (cdr (assoc 'descr err))
    ;;                     :filename (f-relative
    ;;                                (cdr (assoc 'path err))
    ;;                                (f-dirname (file-truename
    ;;                                            (buffer-file-name))))
    ;;                     :buffer buffer
    ;;                     :checker checker)))
    ;;              (cdr (assoc 'errors o))))))
    ;;
    ;;(flycheck-define-checker javascript-flow
    ;;  "Javascript type checking using Flow."
    ;;  :command ("flow" "--json" source-original)
    ;;  :error-parser flycheck-parse-flow
    ;;  :modes react-mode
    ;;  :next-checkers ((error . javascript-eslint))
    ;;  )
    ;;
    ;;(add-to-list 'flycheck-checkers 'javascript-flow)
    ;;(add-hook 'react-mode-hook 'flycheck-mode)

    ;; -----------flow flycheck setup

    (setq prettier-js-show-errors (quote buffer))

    ;;(setq prettier-js-args '(
    ;;                         "--prettier-last" "true"
    ;;                         "--single-quote"
    ;;                         "--semi" "true"
    ;;                         "--trailing-comma" "all"
    ;;                         "--bracket-spacing" "true"
    ;;                         ))

  #+END_SRC
* Vue config
  #+BEGIN_SRC emacs-lisp

    (require 'lsp-mode)
    (require 'lsp-vue)
    (add-hook 'vue-mode-hook #'lsp-vue-mmm-enable)
    (with-eval-after-load 'lsp-mode
      (require 'lsp-ui))
    (require 'company-lsp)
    (push 'company-lsp company-backends)

  #+END_SRC
* Reason config
  #+BEGIN_SRC emacs-lisp

    ;; reason setup
    (defun shell-cmd (cmd)
      "Returns the stdout output of a shell command or nil if the command returned
     an error"
      (car (ignore-errors (apply 'process-lines (split-string cmd)))))

    (let* ((refmt-bin (or (shell-cmd "refmt ----where")
                          (shell-cmd "which refmt")))
           (merlin-bin (or (shell-cmd "ocamlmerlin ----where")
                           (shell-cmd "which ocamlmerlin")))
           (merlin-base-dir (when merlin-bin
                              (replace-regexp-in-string "bin/ocamlmerlin$" "" merlin-bin))))
      ;; Add npm merlin.el to the emacs load path and tell emacs where to find ocamlmerlin
      (when merlin-bin
        (add-to-list 'load-path (concat merlin-base-dir "share/emacs/site-lisp/"))
        (setq merlin-command merlin-bin))

      (when refmt-bin
        (setq refmt-command refmt-bin)))

    (require 'reason-mode)
    (require 'merlin)
    (add-hook 'reason-mode-hook (lambda ()
                                  (add-hook 'before-save-hook 'refmt-before-save)
                                  (merlin-mode)))

    (setq merlin-ac-setup t)
    (add-hook 'reason-mode-hook (lambda ()
                                  (add-hook 'before-save-hook 'refmt-before-save)))
    (setq merlin-report-warnings nil)

  #+END_SRC
* Java-mode config
  #+BEGIN_SRC emacs-lisp

    (add-hook 'java-mode-hook 'my/block-comment-setup)

  #+END_SRC
* Python-mode config
  #+BEGIN_SRC emacs-lisp

    (defun my/python-indent ()
      (interactive)
      (setq-default indent-tabs-mode nil
                    tab-width 2)
      )

    (venv-initialize-interactive-shells) ;; if you want interactive shell support
    (venv-initialize-eshell)

    (add-hook 'python-mode-hook #'my/python-indent)

  #+END_SRC
* Docker-mode config
  #+BEGIN_SRC emacs-lisp

    (use-package dockerfile-mode
      :ensure t
      :commands (markdown-mode gfm-mode)
      :mode (("Dockerfile\\'" . dockerfile-mode))
      )

  #+END_SRC
* Company config
  #+BEGIN_SRC emacs-lisp

    (use-package company
      :ensure t
      :init (global-company-mode)
      :bind (:map company-mode-map  
                  ("s-j" . company-select-next)
                  ("s-k" . company-select-previous))
      )

  #+END_SRC
* Web-mode config
  #+BEGIN_SRC emacs-lisp

    (use-package web-mode
      :ensure t
      :bind (:map web-mode-map  
                  ("s-;" . nil)))

  #+END_SRC
* Evil
  #+BEGIN_SRC emacs-lisp

    (use-package evil
      :ensure t
      :bind (:map evil-normal-state-map
                  ("C-S-j" . evil-jump-forward)
                  ("C-S-k" . evil-jump-backward)
                  ("C-j" . move-text-down)
                  ("C-k" . move-text-up)
                  ("C-u" . evil-scroll-page-up)
                  ("C-d" . evil-scroll-page-down)
                  ("C-S-u" . upcase-word)
                  ("C-S-d" . downcase-word)
                  ("s-[" . my/next-buffer)
                  ("s-]" . my/previous-buffer) 
                  ("C-h" . evil-first-non-blank)
                  ("C-l" . evil-last-non-blank)
                  ("M-d" . evil-multiedit-match-and-next)
                  ("M-D" . evil-multiedit-match-and-prev)
                  :map evil-visual-state-map
                  ("R" . evil-multiedit-match-all)
                  ("C-S-u" . upcase-region)
                  ("C-S-d" . downcase-region)
                  ("C-u" . evil-scroll-page-up)
                  ("C-d" . evil-scroll-page-down)
                  ("p" . my/evil-paste-after-from-0)
                  ("C-j" . drag-stuff-down)
                  ("C-k" . drag-stuff-up)
                  :map evil-insert-state-map
                  ("C-d" . nil)
                  ("M-d" . evil-multiedit-match-and-next)
                  ("M-D" . evil-multiedit-match-and-prev)
                  ("C-M-D" . evil-multiedit-restore)
                  )
      :config
      (progn 

        ;; default cursor as bar 
        (setq-default cursor-type '(bar . 3))
        (setq evil-normal-state-cursor `(box ,evilNormalColor)) 
        (setq evil-insert-state-cursor `((bar . 3) ,evilInsertColor)) 
        (setq evil-evilified-state-cursor '((bar . 3) "LightGoldenrod3")) 
        (setq evil-emacs-state-cursor '((bar . 3) "SkyBlue2")) 
        (setq evil-motion-state-cursor `((bar . 3) "HotPink1")) 
        (setq evil-lisp-state-cursor '((bar . 3) "HotPink1")) 

        ;;(setq evil-move-cursor-back nil)
    
        ;; ESC to remove search highlig
        (define-key evil-search-highlight-persist-map (kbd "ESC") 'evil-search-highlight-persist-remove-all)

        (evil-leader/set-key
          "jj" 'evil-avy-goto-char
          "od" 'make-directory
          "om" 'markdown-mode
          "oo" 'org-mode
          "os" 'just-one-space
          "ot" 'text-mode
          "si" 'counsel-grep-or-swiper
          ) 

        ))
  #+END_SRC
* Others
  #+BEGIN_SRC emacs-lisp

    (global-unset-key (kbd "s-H"))
    (global-unset-key (kbd "s-h"))
    (global-unset-key (kbd "s-L"))
    (global-unset-key (kbd "s-e"))

    ;; treat _ as word
    (add-hook 'prog-mode-hook 'my/modify-underscore-syntax)
    (add-hook 'text-mode-hook 'my/modify-underscore-syntax)

    ;; set line-spacing to 2
    (setq-default line-spacing 2)

    (add-hook 'text-mode-hook 'auto-fill-mode)
    (remove-hook 'prog-mode-hook 'spacemacs//show-trailing-whitespace)
    (add-hook 'web-mode-hook (lambda () (flycheck-mode -1)))


    (global-hl-line-mode +1)
    (show-paren-mode +1)

    (electric-pair-mode 1)
    (push '(?\' . ?\') electric-pair-pairs)

    (setq package-check-signature nil)
    (setq frame-resize-pixelwise t)

    ;; native line number configuration
    ;; (setq display-line-numbers-grow-only t)
    ;; (setq display-line-numbers-type t)
    ;; (setq display-line-numbers-widen t)
    ;; (setq display-line-numbers-width nil)
    ;; (setq display-line-numbers-width-start nil)

    ;; (dolist (hook 
    ;;          '(prog-mode-hook text-mode-hook react-mode-hook web-mode-hook))
    ;;   (add-hook hook 'display-line-numbers-mode))

    (setq-default evil-escape-delay 0.2)

    ;; visual-line-mode for all text-modes
    (add-hook 'text-mode-hook #'my/enable-visual-line-mode)

    ;; company-tern property marker
    (setq company-tern-property-marker " =>")

    ;; enable symbols by default
    (global-prettify-symbols-mode -1)

    ;; global move visual block up/down: life-saver
    (drag-stuff-global-mode 1)

    (setq zeno-theme-enable-italics t)
    (spacemacs/load-theme 'zeno)

    ;; scale text
    (define-key global-map (kbd "C-+") 'text-scale-increase)
    (define-key global-map (kbd "C--") 'text-scale-decrease)

    ;; key-binding to insert new line between brackets and indent
    (global-set-key (kbd "C-i") 'my/newline-and-indent)

    ;; remap next-buffer to custom buffer functions
    (global-set-key [remap next-buffer] 'my/next-buffer)
    (global-set-key [remap previous-buffer] 'my/previous-buffer)

    (global-set-key [?\C-\s-f] 'toggle-frame-fullscreen)

    ;; as spacemacs is running as daemon, binding qq to kill frame
    (spacemacs/set-leader-keys "qq" #'spacemacs/frame-killer)

    ;; bind snippet expand to s-y
    (global-set-key [?\C-y] 'hippie-expand)
    (global-set-key [?\C-\s-y] 'dabbrev-completion)

    ;; switch org-journal using a function and keybinding
    (global-set-key [?\s-H] 'my/switch-journal)

    (setq-default indent-tabs-mode nil)
    (setq-default tab-width 4)

    ;; beautify titlebar of emacs :heart-eyes:
    (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
    (add-to-list 'default-frame-alist '(ns-appearance . 'nil))

    (spacemacs|diminish drag-stuff-mode " dr")
    (spacemacs|diminish emoji-cheat-sheet-plus-display-mode " EM")
    (spacemacs|diminish prettier-mode " PR")

    ;; set symbola font to be used for all unicode symbols
    ;; other than 
    (set-fontset-font "fontset-default" '(#x00C1 . #x2648) "Symbola-12") 

    ;; native pixel scroll mode
    (pixel-scroll-mode t)

    (setq frame-title-format 
          '((:eval (spacemacs/title-prepare dotspacemacs-frame-title-format))))

    ;; use font awesome folder icon
    (set-fontset-font t '(#Xf07c . #Xf07c) "fontawesome")

    ;; required to kill customize buffers on pressing q
    (setq custom-buffer-done-kill t)

  #+END_SRC
